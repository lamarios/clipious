def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
def ENV = System.getenv()

if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keyFile = ENV['ANDROID_KEY_FILE']
if (keyFile == null) {
    keyFile = '/home/gz/dev/android/keys/key.properties'
}

def buildNumber = flutterVersionCode.toInteger()
if (ENV['DRONE_BUILD_NUMBER'] != null) {
    buildNumber = ENV['DRONE_BUILD_NUMBER'].toInteger()
}

def tag = ENV['DRONE_TAG']
if(tag != null) {
    flutterVersionName = tag
}



print flutterVersionName
print ":"
println buildNumber

def keystoreProperties = new Properties()
def keystorePropertiesFile = file(keyFile)
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    lintOptions {
        checkReleaseBuilds false
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.github.lamarios.clipious"
        minSdkVersion 20
        targetSdkVersion 31
        versionCode buildNumber
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    packagingOptions {
        // Fixes duplicate libraries build issue,
        // when your project uses more than one plugin that depend on C++ libs.
        pickFirst 'lib/**/libc++_shared.so'
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
//            useProguard true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
